<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sandbox.Event</name>
    </assembly>
    <members>
        <member name="T:Sandbox.Event.TickAttribute">
            <summary>
            Called every tick on both client and server
            </summary>
        </member>
        <member name="T:Sandbox.Event.Tick.ServerAttribute">
            <summary>
            Called every tick on the server.
            </summary>
        </member>
        <member name="T:Sandbox.Event.Tick.ClientAttribute">
            <summary>
            Called every server tick on the client. You want to do game logic here, not in <see cref="T:Sandbox.Event.FrameAttribute"/>
            </summary>
        </member>
        <member name="T:Sandbox.Event.FrameAttribute">
            <summary>
            Called every render frame on client. You can still move entities during this period. 
            </summary>
        </member>
        <member name="T:Sandbox.Event.PreRenderAttribute">
            <summary>
            Called right before rendering. All entities are in the position they're going to be rendered in. Moving entities
            here will have no effect until the next frame. Moving SceneObjects is possible here and they will be rendered in their
            new positions.
            </summary>
        </member>
        <member name="T:Sandbox.Event.HotloadAttribute">
            <summary>
            Called when the class this method belongs to is hotloaded
            </summary>
        </member>
        <member name="T:Sandbox.Event.BuildInputAttribute">
            <summary>
            TODO: Document me
            </summary>
        </member>
        <member name="T:Sandbox.Event.Physics.PreStepAttribute">
            <summary>
            Called just before executing a physics frame.
            </summary>
        </member>
        <member name="T:Sandbox.Event.Physics.PostStepAttribute">
            <summary>
            Called just after executing a physics frame.
            </summary>
        </member>
        <member name="T:Sandbox.Event.Entity.PostSpawnAttribute">
            <summary>
            Called after all map entities have spawned in, including after map cleanups.
            </summary>
        </member>
        <member name="T:Sandbox.Event.Screen.SizeChangedAttribute">
            <summary>
            Called after the users window size has changed
            </summary>
        </member>
        <member name="M:Sandbox.Event.RegisterAssembly(System.Reflection.Assembly,System.Reflection.Assembly)">
            <summary>
            Register an assembly. If old assembly is valid, we try to remove all of the old event hooks
            from this assembly, while retaining a list of objects.
            </summary>
        </member>
        <member name="M:Sandbox.Event.Register(System.Object)">
            <summary>
            Register an object to start recieving events
            </summary>
        </member>
        <member name="M:Sandbox.Event.Unregister(System.Object)">
            <summary>
            Unregister an object, stop reciving events
            </summary>
        </member>
        <member name="M:Sandbox.Event.Run(System.String)">
            <summary>
            Run an event
            </summary>
        </member>
        <member name="M:Sandbox.Event.Run``1(System.String,``0)">
            <summary>
            Run an event
            </summary>
        </member>
        <member name="M:Sandbox.Event.Run``2(System.String,``0,``1)">
            <summary>
            Run an event
            </summary>
        </member>
        <member name="T:Sandbox.Event.Streamer.JoinChatAttribute">
            <summary>
            Event called when joined a chat
            </summary>
        </member>
        <member name="T:Sandbox.Event.Streamer.LeaveChatAttribute">
            <summary>
            Event called when left a chat
            </summary>
        </member>
        <member name="T:Sandbox.Event.Streamer.ChatMessageAttribute">
            <summary>
            Event called when chat message comes in
            </summary>
        </member>
        <member name="T:Sandbox.Internal.EventSystem.EventClass">
            <summary>
            A Type with events on it
            </summary>
        </member>
        <member name="T:Sandbox.Internal.EventSystem.EventAction">
            <summary>
            A method on a type
            </summary>
        </member>
        <member name="T:Sandbox.Internal.EventSystem.EventList">
            <summary>
            A list of events, usually indexed by the event name
            </summary>
        </member>
        <member name="M:Sandbox.Internal.EventSystem.RegisterAssembly(System.Reflection.Assembly,System.Reflection.Assembly)">
            <summary>
            Register an assembly. If old assembly is valid, we try to remove all of the old event hooks
            from this assembly, while retaining a list of objects.
            </summary>
        </member>
    </members>
</doc>
