<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sandbox.System</name>
    </assembly>
    <members>
        <member name="M:Sandbox.IRuntimeAsset.StaticRuntimeInit(System.String)">
            <summary>
            If this is defined as a static we call this function on load with its
            full name. This allows you to set the name of your runtime asset to this 
            name - which should offers a degree of debuggability and uniqueness.
            </summary>
        </member>
        <member name="T:Sandbox.InputAttribute">
            <summary>
            Makes this method available as a Map Logic Input, for use in the Hammer Editor. This is only applicable to entities.
            </summary>
        </member>
        <member name="P:Sandbox.InputAttribute.Help">
            <summary>
            Automatically provided using the comment for the method this is attached to.
            </summary>
        </member>
        <member name="P:Sandbox.LibraryAttribute.Name">
            <summary>
            This is the name that will be used to create this class.
            If you don't set it via the attribute constructor it will be set
            to the name of the class it's attached to
            </summary>
        </member>
        <member name="P:Sandbox.LibraryAttribute.Identifier">
            <summary>
            This is based on the full name of this type. Don't rely on it to be
            the same between saves - but it should be reliable over the network.
            </summary>
        </member>
        <member name="P:Sandbox.LibraryAttribute.FullName">
            <summary>
            The full class name
            </summary>
        </member>
        <member name="P:Sandbox.LibraryAttribute.Title">
            <summary>
            A nice presentable name to show
            </summary>
        </member>
        <member name="P:Sandbox.LibraryAttribute.Description">
            <summary>
            We use this to provide a nice description in the editor
            </summary>
        </member>
        <member name="P:Sandbox.LibraryAttribute.Icon">
            <summary>
            We use this to provide an icon in the editor. Icon should be a string from here https://fonts.google.com/icons
            </summary>
        </member>
        <member name="P:Sandbox.LibraryAttribute.Group">
            <summary>
            We use this to organise groups of entities in the editor
            </summary>
        </member>
        <member name="P:Sandbox.LibraryAttribute.Editable">
            <summary>
            We use this to filter entities to show in the entity list in the editor
            </summary>
        </member>
        <member name="P:Sandbox.LibraryAttribute.Spawnable">
            <summary>
            We use this to filter entities that can be spawned in the editor.
            </summary>
        </member>
        <member name="P:Sandbox.LibraryAttribute.PropertiesInternal">
            <summary>
            A list of properties on this class
            </summary>
        </member>
        <member name="F:Sandbox.LibraryAttribute.InputMethods">
            <summary>
            A list of input methods on this class
            </summary>
        </member>
        <member name="M:Sandbox.LibraryAttribute.IsNamed(System.String)">
            <summary>
            Return true if this class matches this name, either with its primary name or any of its alt names.
            </summary>
        </member>
        <member name="M:Sandbox.LibraryAttribute.Create``1">
            <summary>
            Tries to create a type T from this attribute
            </summary>
        </member>
        <member name="T:Sandbox.LibraryMethod">
            <summary>
            Allows you to mark a method to call 
            </summary>
        </member>
        <member name="P:Sandbox.PropertyAttribute.Name">
            <summary>
            The internal name of this property. This should be lowercase with no spaces. If unset the lowercased C# variable name is used.
            </summary>
        </member>
        <member name="P:Sandbox.PropertyAttribute.Title">
            <summary>
            The user friendly name of this property. If unset, it will be autogenerated from C# variable name.
            </summary>
        </member>
        <member name="P:Sandbox.PropertyAttribute.Help">
            <summary>
            The help text for this property.
            </summary>
        </member>
        <member name="M:Sandbox.PropertyAttribute.#ctor(System.String,System.String)">
            <param name="internal_name">The internal name of this property. This should be lowercase with no spaces.</param>
            <param name="help">Help text for this property.</param>
        </member>
        <member name="M:Sandbox.PropertyAttribute.#ctor(System.String,System.String,System.String)">
            <param name="internal_name">The internal name of this property. This should be lowercase with no spaces.</param>
            <param name="title">The user friendly name of this property to display in UI.</param>
            <param name="help">Help text for this property.</param>
        </member>
        <member name="M:Sandbox.PropertyAttribute.SetValue(System.Object,System.Object)">
            <summary>
            Set the value of this property
            </summary>
        </member>
        <member name="M:Sandbox.PropertyAttribute.GetValue``1(System.Object)">
            <summary>
            Get the value of this property
            </summary>
        </member>
        <member name="P:Sandbox.PropertyAttribute.OnPropertyRegistered">
            <summary>
            The engine needs access when a property is registered, because we need to register the
            string with the StringToken system. This allows is to convert a string token to a string..
            .. which is needed so that KeyValues from the engine work properly.
            </summary>
        </member>
        <member name="P:Sandbox.SpawnflagsAttribute.Default">
            <summary>
            The default values for the spawnflags
            </summary>
        </member>
        <member name="T:Sandbox.RangeAttribute">
            <summary>
            Mark this property as a ranged float/int. In inspector we'll be able to create a slider
            instead of a text entry.
            TODO: Replace this with the System.ComponentModel.DataAnnotations.Range one - move step and clamped to their own attributes
            </summary>
        </member>
        <member name="T:Sandbox.NetAttribute">
            <summary>
            Mark a property as networked, so it is sent from the server to the client.
            </summary>
        </member>
        <member name="T:Sandbox.LocalAttribute">
            <summary>
            Combined with [Net], will mean the variable is only sent to the entity's Client.
            </summary>
        </member>
        <member name="T:Sandbox.PredictedAttribute">
            <summary>
            Variable gets saved and restored with other predicted variables. If it's also [Net]worked it'll
            be checked with the networked version to make sure it matches for each tick.
            </summary>
        </member>
        <member name="T:Sandbox.OnChangedCallbackAttribute">
            <summary>
            Obsolete - use Use [Change] instead
            </summary>
        </member>
        <member name="T:Sandbox.ChangeAttribute">
            <summary>
            Combined with [Net], this will invoke a method clientside when the property changes. 
            If no name is provided, we will try to call On[PropertyName]Changed.
            </summary>
        </member>
        <member name="T:Sandbox.Internal.DefaultValueAttribute">
            <summary>
            Sometimes with CodeGen we want reflection to be able to get the original initial value
            of a property (which is set with {get;set;} = initialvalue;). For this reason sometimes
            we'll drop this attribute on that property.
            </summary>
        </member>
        <member name="T:Sandbox.Internal.DescriptionAttribute">
            <summary>
            We want access to the comments. This gives us that. Don't add this manually, we'll automatically convert your
            comments into this.
            </summary>
        </member>
        <member name="P:Sandbox.ConVar.BaseAttribute.Name">
            <summary>
            If unset the name will be set to the name of the method/property
            </summary>
        </member>
        <member name="P:Sandbox.ConVar.BaseAttribute.Help">
            <summary>
            Describes why this command exists
            </summary>
        </member>
        <member name="T:Sandbox.ConVar.ClientDataAttribute">
            <summary>
            A property with this attribute will be made a ClientData ConVar. It will be
            able to be changed by the client at any time and changes will be sent to the server.
            The variables will be accessible on the server by name on the Client object.
            </summary>
        </member>
        <member name="T:Sandbox.ConVar.ReplicatedAttribute">
            <summary>
            Properties with this attribute will be replicated from the server to each client. The
            value can only be changed by the server or the server admin, but clients can read the
            value at any time.
            </summary>
        </member>
        <member name="T:Sandbox.ConVar.MenuAttribute">
            <summary>
            Console variable that is available via the menu
            </summary>
        </member>
        <member name="P:Sandbox.Utility.CommandLine.Full">
            <summary>
            Returns the full command line, reconstructed from System.Environment.GetCommandLineArgs
            </summary>
        </member>
        <member name="M:Sandbox.Utility.CommandLine.HasSwitch(System.String)">
            <summary>
            if ( HasSwitch( "-console" ) ) EnableConsole();
            </summary>
        </member>
        <member name="M:Sandbox.Utility.CommandLine.GetSwitches">
            <summary>
            Returns all command line values
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sandbox.Base36Extensions.ToBase36``1(``0)">
            <summary>
            Encode the given number into a Base36 string
            </summary>
        </member>
        <member name="M:Sandbox.Base36Extensions.FromBase36(System.String)">
            <summary>
            Decode the Base36 Encoded string into a number
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Sandbox.DictionaryExtensions.GetOrCreate``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            If the key doesn't exist it is created and returned
            </summary>
        </member>
        <member name="M:Sandbox.DictionaryExtensions.Clone``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Clones the dictionary. Doesn't clone the values.
            </summary>
        </member>
        <member name="T:Sandbox.MathX">
            <summary>
            A class to add functionality to the math library that System.Math and System.MathF don't provide.
            A lot of these methods are also extensions, so you can use for example `int i = 1.0f.FloorToInt();`
            </summary>
        </member>
        <member name="M:Sandbox.MathX.SnapToGrid(System.Single,System.Single)">
            <summary>
            Snap number to grid
            </summary>
        </member>
        <member name="M:Sandbox.MathX.FloorToInt(System.Single)">
            <summary>
            Remove the fractional part and return the float as an integer.
            </summary>
        </member>
        <member name="M:Sandbox.MathX.UnsignedMod(System.Single,System.Single)">
            <summary>
            Does what you expected to happen when you did "a % b"
            </summary>
        </member>
        <member name="M:Sandbox.MathX.NormalizeDegrees(System.Single)">
            <summary>
            Convert angle to between 0 - 360
            </summary>
        </member>
        <member name="M:Sandbox.MathX.Remap(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Remap a float value from a one range to another
            </summary>
        </member>
        <member name="M:Sandbox.MathX.Remap(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Remap an integer value from a one range to another
            </summary>
        </member>
        <member name="M:Sandbox.NumberExtensions.FormatBytes``1(``0,System.Boolean)">
            <summary>
            Given a number, will format as a memory value, ie 10gb, 4mb
            </summary>
        </member>
        <member name="M:Sandbox.NumberExtensions.Clamp``1(``0,``0,``0)">
            <summary>
            Clamp a number between two values
            </summary>
        </member>
        <member name="M:Sandbox.NumberExtensions.UnsignedMod(System.Int32,System.Int32)">
            <summary>
            Does what you expected to happen when you did "a % b"
            </summary>
        </member>
        <member name="M:Sandbox.NumberExtensions.BitsSet(System.Int32)">
            <summary>
            Returns the number of bits set in an integer. This us usually used for flags to count
            the amount of flags set.
            </summary>
        </member>
        <member name="M:Sandbox.NumberExtensions.Plural(System.Int32,System.String,System.String)">
            <summary>
            Return single if 1 else plural
            </summary>
        </member>
        <member name="M:Sandbox.NumberExtensions.FormatWithSuffix(System.Int32)">
            <summary>
            Change 1 to 1st, 2 to 2nd etc
            </summary>
        </member>
        <member name="M:Sandbox.RandomExtension.Double(System.Random,System.Double,System.Double)">
            <summary>
            Returns a double between min and max
            </summary>
        </member>
        <member name="M:Sandbox.RandomExtension.Float(System.Random,System.Single,System.Single)">
            <summary>
            Returns a random float between min and max
            </summary>
        </member>
        <member name="M:Sandbox.RandomExtension.Float(System.Random,System.Single)">
            <summary>
            Returns a random float between 0 and max (or 1)
            </summary>
        </member>
        <member name="M:Sandbox.RandomExtension.Double(System.Random,System.Double)">
            <summary>
            Returns a random double between 0 and max (or 1)
            </summary>
        </member>
        <member name="M:Sandbox.RandomExtension.Int(System.Random,System.Int32,System.Int32)">
            <summary>
            Returns a random int between min and max (inclusive)
            </summary>
        </member>
        <member name="M:Sandbox.RandomExtension.Int(System.Random,System.Int32)">
            <summary>
            Returns a random int between 0 and max (inclusive)
            </summary>
        </member>
        <member name="M:Sandbox.RandomExtension.Color(System.Random)">
            <summary>
            Returns a random Color
            </summary>
        </member>
        <member name="M:Sandbox.RandomExtension.FromArray``1(System.Random,``0[],``0)">
            <summary>
            Returns a random value in an array
            </summary>
        </member>
        <member name="M:Sandbox.RandomExtension.FromList``1(System.Random,System.Collections.Generic.List{``0},``0)">
            <summary>
            Returns a random value in a list
            </summary>
        </member>
        <member name="M:Sandbox.ReflectionExtensions.HasAttribute(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Returns true if this member has this attribute
            </summary>
        </member>
        <member name="M:Sandbox.ReflectionExtensions.HasBaseType(System.Type,System.String)">
            <summary>
            Returns true if this type derives from a type named name
            </summary>
        </member>
        <member name="T:Sandbox.StringX">
            <summary>
            A class to add functionality to the string library.
            A lot of these methods are also extensions, so you can use for example `str safe = badstring.QuoteSafe()`
            </summary>
        </member>
        <member name="M:Sandbox.StringX.QuoteSafe(System.String)">
            <summary>
            Puts quote marks around a string. Internal quotes are backslashed.
            </summary>
        </member>
        <member name="M:Sandbox.StringX.NormalizeFilename(System.String)">
            <summary>
            Puts a filename into the format /path/filename.ext (from path\FileName.EXT)
            </summary>
        </member>
        <member name="M:Sandbox.StringX.SplitQuotesStrings(System.String)">
            <summary>
            in  : I am "splitting a" string "because it's fun "
            out : ["I", "am", "splitting a", "string", "because it's fun"]
            </summary>
        </member>
        <member name="M:Sandbox.StringX.ToDecimal(System.String,System.Decimal)">
            <summary>
            128-bit data type that returns sane results for almost any input.
            All other numeric types can cast from this.
            </summary>
        </member>
        <member name="M:Sandbox.StringX.ToFloat(System.String,System.Single)">
            <summary>
            Convert to float, if not then return Default
            </summary>
        </member>
        <member name="M:Sandbox.StringX.ToUInt(System.String,System.Int32)">
            <summary>
            Convert to uint, if not then return Default
            </summary>
        </member>
        <member name="M:Sandbox.StringX.ToInt(System.String,System.Int32)">
            <summary>
            Convert to int, if not then return Default
            </summary>
        </member>
        <member name="M:Sandbox.StringX.ToULong(System.String,System.UInt64)">
            <summary>
            Convert to int, if not then return Default
            </summary>
        </member>
        <member name="M:Sandbox.StringX.ToBool(System.String)">
            <summary>
            Try to convert to bool. Inputs can be true, false, yes, no, 0, 1, null (caps insensitive)
            </summary>
        </member>
        <member name="M:Sandbox.StringX.Truncate(System.String,System.Int32,System.String)">
            <summary>
            If the string is longer than this amount of characters then truncate it
            If appendage is defined, it will be appended to the end of truncated strings (ie, "..")
            </summary>
        </member>
        <member name="M:Sandbox.StringX.TruncateFilename(System.String,System.Int32,System.String)">
            <summary>
            If the string is longer than this amount of characters then truncate it
            If appendage is defined, it will be appended to the end of truncated strings (ie, "..")
            </summary>
        </member>
        <member name="M:Sandbox.StringX.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            An extended Contains which takes a StringComparison.
            </summary>
        </member>
        <member name="M:Sandbox.StringX.Snippet(System.String,System.String,System.Int32)">
            <summary>
            Given a large string, find all occurrances of a substring and return them with padding.
            This is useful in situations where you're searching for a word in a hug body of text, and
            want to show how it's used without displaying the whole text.
            </summary>
        </member>
        <member name="M:Sandbox.StringX.ToTitleCase(System.String)">
            <summary>
            Convert a variable name to something more user friendly.
            </summary>
        </member>
        <member name="M:Sandbox.StringX.RemoveBadCharacters(System.String)">
            <summary>
            Removes bad, invisible characters that are commonly used to exploit.
            https://en.wikipedia.org/wiki/Zero-width_non-joiner
            </summary>
        </member>
        <member name="M:Sandbox.StringX.Base64Encode(System.String)">
            <summary>
            Convert to a base64 encoded string
            </summary>
        </member>
        <member name="M:Sandbox.StringX.Base64Decode(System.String)">
            <summary>
            Convert from a base64 encoded string
            </summary>
        </member>
        <member name="M:Sandbox.StringX.ToType(System.String,System.Type)">
            <summary>
            Try to politely convert from a string to another type
            </summary>
        </member>
        <member name="M:Sandbox.StringX.TryToType(System.String,System.Type,System.Object@)">
            <summary>
            Try to politely convert from a string to another type
            </summary>
        </member>
        <member name="M:Sandbox.StringX.Columnize(System.String,System.Int32,System.Boolean)">
            <summary>
            convert "string" into "string       " or "      string"
            </summary>
        </member>
        <member name="M:Sandbox.StringX.WildcardMatch(System.String,System.String)">
            <summary>
            Returns true if tjhis string matches a wildcard match
            </summary>
        </member>
        <member name="M:Sandbox.StringX.TrimQuoted(System.String,System.Boolean)">
            <summary>
            The string might start and end in quotes ( ", ' ), remove those if that is the case.
            </summary>
        </member>
        <member name="T:Sandbox.Html.Attribute">
            <summary>
            Represents an HTML attribute.
            </summary>
        </member>
        <member name="P:Sandbox.Html.Attribute.Name">
            <summary>
            Gets the qualified name of the attribute.
            </summary>
        </member>
        <member name="P:Sandbox.Html.Attribute.Value">
            <summary>
            Gets or sets the value of the attribute.
            </summary>
        </member>
        <member name="T:Sandbox.Html.Document">
            <summary>
            Represents a complete HTML document.
            </summary>
        </member>
        <member name="F:Sandbox.Html.Document.Text">
            <summary>The HtmlDocument Text. Careful if you modify it.</summary>
        </member>
        <member name="F:Sandbox.Html.Document.BackwardCompatibility">
            <summary>True to stay backward compatible with previous version of HAP. This option does not guarantee 100% compatibility.</summary>
        </member>
        <member name="F:Sandbox.Html.Document.OptionCheckSyntax">
            <summary>
            Defines if non closed nodes will be checked at the end of parsing. Default is true.
            </summary>
        </member>
        <member name="F:Sandbox.Html.Document.OptionExtractErrorSourceTextMaxLength">
            <summary>
            Defines the maximum length of source text or parse errors. Default is 100.
            </summary>
        </member>
        <member name="F:Sandbox.Html.Document.OptionMaxNestedChildNodes">
            <summary>
            The max number of nested child nodes. 
            Added to prevent stackoverflow problem when a page has tens of thousands of opening html tags with no closing tags 
            </summary>
        </member>
        <member name="M:Sandbox.Html.Document.#ctor">
            <summary>
            Creates an instance of an HTML document.
            </summary>
        </member>
        <member name="P:Sandbox.Html.Document.ParsedText">
            <summary>Gets the parsed text.</summary>
            <value>The parsed text.</value>
        </member>
        <member name="P:Sandbox.Html.Document.MaxDepthLevel">
            <summary>
            Defines the max level we would go deep into the html document. If this depth level is exceeded, and exception is
            thrown.
            </summary>
        </member>
        <member name="P:Sandbox.Html.Document.DocumentNode">
            <summary>
            Gets the root node of the document.
            </summary>
        </member>
        <member name="P:Sandbox.Html.Document.ParseErrors">
            <summary>
            Gets a list of parse errors found in the document.
            </summary>
        </member>
        <member name="M:Sandbox.Html.Document.IsWhiteSpace(System.Int32)">
            <summary>
            Determines if the specified character is considered as a whitespace character.
            </summary>
            <param name="c">The character to check.</param>
            <returns>true if if the specified character is considered as a whitespace character.</returns>
        </member>
        <member name="M:Sandbox.Html.Document.Load(System.IO.TextReader)">
            <summary>
            Loads the HTML document from the specified TextReader.
            </summary>
            <param name="reader">The TextReader used to feed the HTML data into the document. May not be null.</param>
        </member>
        <member name="M:Sandbox.Html.Document.LoadHtml(System.String)">
            <summary>
            Loads the HTML document from the specified string.
            </summary>
            <param name="html">String containing the HTML document to load. May not be null.</param>
        </member>
        <member name="T:Sandbox.Html.Node">
            <summary>
            Represents an HTML node.
            </summary>
        </member>
        <member name="F:Sandbox.Html.Node.HtmlNodeTypeNameComment">
            <summary>
            Gets the name of a comment node. It is actually defined as '#comment'.
            </summary>
        </member>
        <member name="F:Sandbox.Html.Node.HtmlNodeTypeNameDocument">
            <summary>
            Gets the name of the document node. It is actually defined as '#document'.
            </summary>
        </member>
        <member name="F:Sandbox.Html.Node.HtmlNodeTypeNameText">
            <summary>
            Gets the name of a text node. It is actually defined as '#text'.
            </summary>
        </member>
        <member name="M:Sandbox.Html.Node.#ctor(Sandbox.Html.NodeType,Sandbox.Html.Document,System.Int32)">
            <summary>
            Initializes HtmlNode, providing type, owner and where it exists in a collection
            </summary>
            <param name="type"></param>
            <param name="ownerdocument"></param>
            <param name="index"></param>
        </member>
        <member name="P:Sandbox.Html.Node.IsElement">
            <summary>
            Returns true if this is a html element (ie, not a comment or text)
            </summary>
        </member>
        <member name="P:Sandbox.Html.Node.IsComment">
            <summary>
            Returns true if this is a comment
            </summary>
        </member>
        <member name="P:Sandbox.Html.Node.IsText">
            <summary>
            Returns true if this is text
            </summary>
        </member>
        <member name="P:Sandbox.Html.Node.Attributes">
            <summary>
            Gets the collection of HTML attributes for this node. May not be null.
            </summary>
        </member>
        <member name="P:Sandbox.Html.Node.ChildNodes">
            <summary>
            Gets all the children of the node.
            </summary>
        </member>
        <member name="P:Sandbox.Html.Node.Closed">
            <summary>
            Gets a value indicating if this node has been closed or not.
            </summary>
        </member>
        <member name="P:Sandbox.Html.Node.HasAttributes">
            <summary>
            Gets a value indicating whether the current node has any attributes.
            </summary>
        </member>
        <member name="P:Sandbox.Html.Node.HasChildNodes">
            <summary>
            Gets a value indicating whether this node has any child nodes.
            </summary>
        </member>
        <member name="P:Sandbox.Html.Node.InnerHtml">
            <summary>
            Gets or Sets the HTML between the start and end tags of the object.
            </summary>
        </member>
        <member name="P:Sandbox.Html.Node.Line">
            <summary>
            Gets the line number of this node in the document.
            </summary>
        </member>
        <member name="P:Sandbox.Html.Node.LinePosition">
            <summary>
            Gets the column number of this node in the document.
            </summary>
        </member>
        <member name="P:Sandbox.Html.Node.InnerStartIndex">
            <summary>
            Gets the stream position of the area between the opening and closing tag of the node, relative to the start of the document.
            </summary>
        </member>
        <member name="P:Sandbox.Html.Node.Name">
            <summary>
            Gets or sets this node's name.
            </summary>
        </member>
        <member name="P:Sandbox.Html.Node.NodeType">
            <summary>
            Gets the type of this node.
            </summary>
        </member>
        <member name="P:Sandbox.Html.Node.OuterHtml">
            <summary>
            Gets or Sets the object and its content in HTML.
            </summary>
        </member>
        <member name="P:Sandbox.Html.Node.OwnerDocument">
            <summary>
            Gets the <see cref="T:Sandbox.Html.Document"/> to which this node belongs.
            </summary>
        </member>
        <member name="P:Sandbox.Html.Node.ParentNode">
            <summary>
            Gets the parent of this node (for nodes that can have parents).
            </summary>
        </member>
        <member name="P:Sandbox.Html.Node.PreviousSibling">
            <summary>
            Gets the node immediately preceding this node.
            </summary>
        </member>
        <member name="P:Sandbox.Html.Node.Depth">
            <summary>
            The depth of the node relative to the opening root html element. This value is used to determine if a document has to many nested html nodes which can cause stack overflows
            </summary>
        </member>
        <member name="M:Sandbox.Html.Node.Ancestors">
            <summary>
            Returns a collection of all ancestor nodes of this element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sandbox.Html.Node.Ancestors(System.String)">
            <summary>
            Get Ancestors with matching name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Sandbox.Html.Node.AncestorsAndSelf">
            <summary>
            Returns a collection of all ancestor nodes of this element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sandbox.Html.Node.AncestorsAndSelf(System.String)">
            <summary>
            Gets all anscestor nodes and the current node
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Sandbox.Html.Node.AppendChild(Sandbox.Html.Node)">
            <summary>
            Adds the specified node to the end of the list of children of this node.
            </summary>
            <param name="newChild">The node to add. May not be null.</param>
            <returns>The node added.</returns>
        </member>
        <member name="M:Sandbox.Html.Node.SetChildNodesId(Sandbox.Html.Node)">
            <summary>Sets child nodes identifier.</summary>
            <param name="chilNode">The chil node.</param>
        </member>
        <member name="M:Sandbox.Html.Node.Descendants">
            <summary>
            Gets all Descendant nodes in enumerated list
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sandbox.Html.Node.Descendants(System.Int32)">
            <summary>
            Gets all Descendant nodes in enumerated list
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sandbox.Html.Node.Descendants(System.String)">
            <summary>
            Get all descendant nodes with matching name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Sandbox.Html.Node.DescendantsAndSelf">
            <summary>
            Returns a collection of all descendant nodes of this element, in document order
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sandbox.Html.Node.DescendantsAndSelf(System.String)">
            <summary>
            Gets all descendant nodes including this node
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Sandbox.Html.Node.Element(System.String)">
            <summary>
            Gets first generation child node matching name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Sandbox.Html.Node.Elements(System.String)">
            <summary>
            Gets matching first generation child nodes matching name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Sandbox.Html.Node.GetAttribute(System.String,System.String)">
            <summary>
            Helper method to get the value of an attribute of this node. If the attribute is not found, the default value will be returned.
            </summary>
            <param name="name">The name of the attribute to get. May not be <c>null</c>.</param>
            <param name="def">The default value to return if not found.</param>
            <returns>The value of the attribute if found, the default value if not found.</returns>
        </member>
        <member name="M:Sandbox.Html.Node.RemoveAllIDforNode(Sandbox.Html.Node)">
            <summary>Removes all id for node described by node.</summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Sandbox.Html.Node.RemoveChild(Sandbox.Html.Node)">
            <summary>
            Removes the specified child node.
            </summary>
            <param name="oldChild">The node being removed. May not be <c>null</c>.</param>
            <returns>The node removed.</returns>
        </member>
        <member name="M:Sandbox.Html.Node.SetParent(Sandbox.Html.Node)">
            <summary>
            Sets the parent Html node and properly determines the current node's depth using the parent node's depth.
            </summary>
        </member>
        <member name="T:Sandbox.Html.NodeType">
            <summary>
            Represents the type of a node.
            </summary>
        </member>
        <member name="F:Sandbox.Html.NodeType.Document">
            <summary>
            The root of a document.
            </summary>
        </member>
        <member name="F:Sandbox.Html.NodeType.Element">
            <summary>
            An HTML element.
            </summary>
        </member>
        <member name="F:Sandbox.Html.NodeType.Comment">
            <summary>
            An HTML comment.
            </summary>
        </member>
        <member name="F:Sandbox.Html.NodeType.Text">
            <summary>
            A text node is always the child of an element or a document node.
            </summary>
        </member>
        <member name="T:Sandbox.Html.ParseError">
            <summary>
            Represents a parsing error found during document parsing.
            </summary>
        </member>
        <member name="P:Sandbox.Html.ParseError.Code">
            <summary>
            Gets the type of error.
            </summary>
        </member>
        <member name="P:Sandbox.Html.ParseError.Line">
            <summary>
            Gets the line number of this error in the document.
            </summary>
        </member>
        <member name="P:Sandbox.Html.ParseError.LinePosition">
            <summary>
            Gets the column number of this error in the document.
            </summary>
        </member>
        <member name="P:Sandbox.Html.ParseError.Reason">
            <summary>
            Gets a description for the error.
            </summary>
        </member>
        <member name="P:Sandbox.Html.ParseError.SourceText">
            <summary>
            Gets the the full text of the line containing the error.
            </summary>
        </member>
        <member name="P:Sandbox.Html.ParseError.StreamPosition">
            <summary>
            Gets the absolute stream position of this error in the document, relative to the start of the document.
            </summary>
        </member>
        <member name="T:Sandbox.Html.ParseErrorCode">
            <summary>
            Represents the type of parsing error.
            </summary>
        </member>
        <member name="F:Sandbox.Html.ParseErrorCode.TagNotClosed">
            <summary>
            A tag was not closed.
            </summary>
        </member>
        <member name="F:Sandbox.Html.ParseErrorCode.TagNotOpened">
            <summary>
            A tag was not opened.
            </summary>
        </member>
        <member name="F:Sandbox.Html.ParseErrorCode.CharsetMismatch">
            <summary>
            There is a charset mismatch between stream and declared (META) encoding.
            </summary>
        </member>
        <member name="F:Sandbox.Html.ParseErrorCode.EndTagNotRequired">
            <summary>
            An end tag was not required.
            </summary>
        </member>
        <member name="F:Sandbox.Html.ParseErrorCode.EndTagInvalidHere">
            <summary>
            An end tag is invalid at this position.
            </summary>
        </member>
        <member name="T:Sandbox.Html.TextNode">
            <summary>
            Represents an HTML text node.
            </summary>
        </member>
        <member name="P:Sandbox.Html.TextNode.InnerHtml">
            <summary>
            Gets or Sets the HTML between the start and end tags of the object. In the case of a text node, it is equals to OuterHtml.
            </summary>
        </member>
        <member name="P:Sandbox.Html.TextNode.OuterHtml">
            <summary>
            Gets or Sets the object and its content in HTML.
            </summary>
        </member>
        <member name="T:Sandbox.UI.Length">
            <summary>
            A variable unit based length. ie, could be a percentage or a pixel length
            </summary>
        </member>
        <member name="F:Sandbox.UI.Length.RootSize">
            <summary>
            The current root panel size. This is required for vh, vw, vmin and vmax. This is set During PreLayout, Layout and PostLayout
            </summary>
        </member>
        <member name="M:Sandbox.UI.Length.GetPixels(System.Single)">
            <summary>
            Convert to a pixel value. Use the dimension to work out percentage values.
            </summary>
        </member>
        <member name="M:Sandbox.UI.Length.GetPixels(System.Single,System.Single)">
            <summary>
            Get the pixel size but also evaluate content size to support use Start, End, Center
            </summary>
        </member>
        <member name="M:Sandbox.UI.Length.Lerp(Sandbox.UI.Length,Sandbox.UI.Length,System.Single,System.Single)">
            <summary>
            Lerp from one length to another. 
            </summary>
            <param name="a">Length at delta 0</param>
            <param name="b">Length at delta 1</param>
            <param name="delta">The interpolation stage</param>
            <param name="dimension">The width or height of the parent to use when working out percentage lengths</param>
            <returns>The lerped Length</returns>
        </member>
        <member name="M:Sandbox.UI.Length.Lerp(Sandbox.UI.Length,Sandbox.UI.Length,System.Single)">
            <summary>
            Lerp from one length to another. 
            </summary>
            <param name="a">Length at delta 0</param>
            <param name="b">Length at delta 1</param>
            <param name="delta">The interpolation stage</param>
            <returns>The lerped Length</returns>
        </member>
        <member name="M:Sandbox.UI.Length.Pixels(System.Single)">
            <summary>
            Create a length in pixels
            </summary>
            <param name="pixels">The amount of pixels for this length</param>
            <returns>A new length</returns>
        </member>
        <member name="M:Sandbox.UI.Length.Percent(System.Single)">
            <summary>
            Create a length in percents
            </summary>
            <param name="percent">The amount of percent for this (0-100)</param>
            <returns>A new length</returns>
        </member>
        <member name="M:Sandbox.UI.Length.ViewHeight(System.Single)">
            <summary>
            Create a length based on the view height
            </summary>
            <param name="percentage">The amount of percent for this (0-100)</param>
            <returns>A new length</returns>
        </member>
        <member name="M:Sandbox.UI.Length.ViewWidth(System.Single)">
            <summary>
            Create a length based on the view width
            </summary>
            <param name="percentage">The amount of percent for this (0-100)</param>
            <returns>A new length</returns>
        </member>
        <member name="M:Sandbox.UI.Length.ViewMax(System.Single)">
            <summary>
            Create a length based on the the maximum of the screen size
            </summary>
            <param name="percentage">The amount of percent for this (0-100)</param>
            <returns>A new length</returns>
        </member>
        <member name="M:Sandbox.UI.Length.ViewMin(System.Single)">
            <summary>
            Create a length based on the the minimum of the screen size
            </summary>
            <param name="percentage">The amount of percent for this (0-100)</param>
            <returns>A new length</returns>
        </member>
        <member name="M:Sandbox.UI.Length.Fraction(System.Single)">
            <summary>
            Create a length in percents
            </summary>
            <param name="fraction">The fraction of a percent (0 = 0%, 1 = 100%)</param>
            <returns>A new length</returns>
        </member>
        <member name="M:Sandbox.UI.Length.Parse(System.String)">
            <summary>
            Parse a length. This is used by the stylesheet parsing system.
            </summary>
            <param name="value">A length represented by a string</param>
            <example>Length.Parse( "100px" )</example>
            <example>Length.Parse( "56%" )</example>
            <returns></returns>
        </member>
        <member name="M:Sandbox.UI.Length.GetFraction(System.Single)">
            <summary>
            If it's a %, will return 0-1. If not it'll return its value.
            </summary>
        </member>
        <member name="M:Sandbox.UI.Margin.GetEdges(Vector2,System.Nullable{Sandbox.UI.Length},System.Nullable{Sandbox.UI.Length},System.Nullable{Sandbox.UI.Length},System.Nullable{Sandbox.UI.Length})">
            <summary>
            Returns a Rect where left right top bottom describe the size of an edge.
            This is used for things like margin, padding, border size
            </summary>
        </member>
        <member name="P:Sandbox.UI.Margin.EdgeSize">
            <summary>
            When the Rect describes edges, this returns the total size of the edges in each direction
            </summary>
        </member>
        <member name="M:Sandbox.UI.Margin.EdgeAdd(Sandbox.UI.Margin)">
            <summary>
            Where padding is an edge type rect, will return this rect expanded with those edges.
            </summary>
        </member>
        <member name="M:Sandbox.UI.Margin.EdgeSubtract(Sandbox.UI.Margin)">
            <summary>
            Where padding is an edge type rect, will return this rect expanded with those edges.
            </summary>
        </member>
        <member name="P:Sandbox.RealTime.Now">
            <summary>
            The time since game startup
            </summary>
        </member>
        <member name="P:Sandbox.RealTime.Delta">
            <summary>
            The delta between the last frame and the current (for all intents and purposes)
            </summary>
        </member>
        <member name="T:Sandbox.IValid">
            <summary>
            This object can become invalid
            </summary>
        </member>
        <member name="M:Sandbox.IValidCheckExtension.IsValid(Sandbox.IValid)">
            <summary>
            returns false if IValid is null or .IsValid returns false
            </summary>
        </member>
        <member name="M:Sandbox.Parse.ReadSentence">
            <summary>
            Reads a sentence until the next statement divided by ,
            Returns the sentence
            </summary>
        </member>
        <member name="M:Sandbox.Parse.Is(System.String,System.Int32,System.Boolean)">
            <summary>
            Return true if the string at the pointer is this
            </summary>
        </member>
        <member name="M:Sandbox.Parse.TrySkip(System.String,System.Int32,System.Boolean)">
            <summary>
            Skip this string if it exists
            </summary>
        </member>
        <member name="M:Sandbox.Parse.Is(System.Char,System.Int32,System.Boolean)">
            <summary>
            Return true if the char at the pointer is this
            </summary>
        </member>
        <member name="T:Sandbox.Rand">
            <summary>
            Provide unseeded random values
            </summary>
        </member>
        <member name="M:Sandbox.Rand.SetSeed(System.Int32)">
            <summary>
            Sets the seed for these static classes
            </summary>
        </member>
        <member name="M:Sandbox.Rand.Double(System.Double,System.Double)">
            <summary>
            Returns a double between min and max
            </summary>
        </member>
        <member name="M:Sandbox.Rand.Float(System.Single,System.Single)">
            <summary>
            Returns a random float between min and max
            </summary>
        </member>
        <member name="M:Sandbox.Rand.Float(System.Single)">
            <summary>
            Returns a random float between 0 and max (or 1)
            </summary>
        </member>
        <member name="M:Sandbox.Rand.Double(System.Double)">
            <summary>
            Returns a random double between 0 and max (or 1)
            </summary>
        </member>
        <member name="M:Sandbox.Rand.Int(System.Int32,System.Int32)">
            <summary>
            Returns a random int between min and max (inclusive)
            </summary>
        </member>
        <member name="M:Sandbox.Rand.Int(System.Int32)">
            <summary>
            Returns a random int between 0 and max (inclusive)
            </summary>
        </member>
        <member name="M:Sandbox.Rand.Color">
            <summary>
            Returns a random Color
            </summary>
        </member>
        <member name="M:Sandbox.Rand.FromArray``1(``0[],``0)">
            <summary>
            Returns a random value in an array
            </summary>
        </member>
        <member name="M:Sandbox.Rand.FromList``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Returns a random value in a list
            </summary>
        </member>
        <member name="P:ConsoleVariableAttribute.Saved">
            <summary>
            TODO: Implement
            </summary>
        </member>
        <member name="T:ClientVarAttribute">
            <summary>
            Clientside console variable.
            </summary>
        </member>
        <member name="T:ServerVarAttribute">
            <summary>
            Serverside only console variable. Only admins can change these.
            </summary>
        </member>
        <member name="T:ServerCmdAttribute">
            <summary>
            Makes this method a serverside console command. Clients can still run these! Use <c>Sandbox.ConsoleSystem.Caller</c> to get the command caller.
            </summary>
        </member>
        <member name="T:AdminCmdAttribute">
            <summary>
            Makes this method an admin only serverside console command. Use <c>Sandbox.ConsoleSystem.Caller</c> to get the command caller.
            </summary>
        </member>
        <member name="T:ClientCmdAttribute">
            <summary>
            Makes this method a clientside only console command, with optional ability for the server to run it on any client
            </summary>
        </member>
        <member name="F:ClientCmdAttribute.CanBeCalledFromServer">
            <summary>
            If true the server can run this command on the client any time it wants
            </summary>
        </member>
        <member name="T:MenuCmdAttribute">
            <summary>
            Menu only console command.
            </summary>
        </member>
        <member name="F:MenuCmdAttribute.CanBeCalledFromServer">
            <summary>
            If true the server can run this command on the client any time it wants.
            </summary>
        </member>
        <member name="M:Color.WithAlpha(System.Single)">
            <summary>
            Returns this colour with its alpha value changed
            </summary>
            <param name="alpha">The required alpha value, usually between 0-1</param>
        </member>
        <member name="M:Color.WithRed(System.Single)">
            <summary>
            Returns this colour with its red value changed
            </summary>
        </member>
        <member name="M:Color.WithGreen(System.Single)">
            <summary>
            Returns this colour with its green value changed
            </summary>
        </member>
        <member name="M:Color.WithBlue(System.Single)">
            <summary>
            Returns this colour with its blue value changed
            </summary>
        </member>
        <member name="M:Color.ToColor32(System.Boolean)">
            <summary>
            Convert to a Color32 (a 32 bit color value)
            </summary>
            <param name="srgb">If true we'll convert to  the srgb color space</param>
        </member>
        <member name="M:Color.ComponentCountChangedBetweenColors(Color)">
            <summary>
            Returns how many color components would be changed between this color and another color
            </summary>
        </member>
        <member name="T:Color32">
             <summary>
             A 32bit color, commonly used by things like vertex buffers.
            
             The functionality on this is purposely left minimal so we're encouraged to use the regular Color struct.
             </summary>
        </member>
        <member name="M:ColorXYZ.ToColor">
            <summary>
            Convert XYZ to standard RGB
            </summary>
        </member>
        <member name="M:ColorXYZ.ToD50">
            <summary>
            Convert from D65 to D50 as reference white value
            </summary>
        </member>
        <member name="M:ColorXYZ.ToD65">
            <summary>
            Convert from D50 to D65 as reference white value
            </summary>
        </member>
        <member name="M:ColorXYZ.FromA98(Color)">
            <summary>
            Convert from the Adobe 1998 RGB Color space to XYZ
            </summary>
        </member>
        <member name="M:ColorXYZ.FromLab(Color,System.Boolean)">
            <summary>
            Convert from the Lab Color space to XYZ
            </summary>
        </member>
        <member name="M:ColorXYZ.op_Implicit(ColorXYZ)~Color">
            <summary>
            Convert from XYZ -> Standard RGB
            </summary>
        </member>
        <member name="M:ColorXYZ.Lerp(ColorXYZ,ColorXYZ,System.Single,System.Boolean)">
            <summary>
            Linearly interpolate from one color to another
            </summary>
        </member>
        <member name="M:ColorXYZ.op_Implicit(Color)~ColorXYZ">
            <summary>
            Convert standard RGB to XYZ
            </summary>
        </member>
        <member name="P:Angles.Direction">
            <summary>
            The direction vector for this angle
            </summary>
        </member>
        <member name="M:Angles.AngleVector(Angles)">
            <summary>
            Converts an angle to a forward vector
            </summary>
        </member>
        <member name="M:BBox.Contains(BBox)">
            <summary>
            Returns true if this bbox completely contains bbox
            </summary>
        </member>
        <member name="M:BBox.Overlaps(BBox)">
            <summary>
            Returns true if this bbox somewat overlaps bbox
            </summary>
        </member>
        <member name="M:BBox.AddPoint(Vector3)">
            <summary>
            Returns this bbox but stretched to include this point
            </summary>
        </member>
        <member name="M:BBox.ClosestPoint(Vector3)">
            <summary>
            Returns the closest point on this bbox to another point
            </summary>
        </member>
        <member name="M:BBox.FromHeightAndRadius(System.Single,System.Single)">
            <summary>
            Creates a bbox of radius length and depth, and height height
            </summary>
        </member>
        <member name="M:BBox.ToString">
            <summary>
            Formats the bbox into a string "mins, maxs"
            </summary>
            <returns></returns>
        </member>
        <member name="M:Capsule.FromHeightAndRadius(System.Single,System.Single)">
            <summary>
            Creates a capule where Point A is radius units above the ground and Point B is height minus radius units above the ground.
            </summary>
        </member>
        <member name="M:Frustum.GetCorner(System.Int32)">
            <summary>
            Returns the corner point of one of the 8 corners.
            This may return null if i is > 7 or the frustum is invalid.
            </summary>
        </member>
        <member name="P:Line.Delta">
            <summary>
            Returns the result of b - a
            </summary>
        </member>
        <member name="P:Line.Center">
            <summary>
            Returns the midpoint between a and b
            </summary>
        </member>
        <member name="M:Matrix.ToString">
            <summary>
            Formats the matrix and returns it as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Matrix.Transform(Vector3)">
            <summary>
            Transforms a vector by a 4x4 matrix
            </summary>
        </member>
        <member name="M:Matrix.TransformNormal(Vector3)">
            <summary>
            Transforms a normal vector by a specified 4x4 matrix
            </summary>
        </member>
        <member name="M:Plane.Trace(Ray,System.Boolean,System.Double)">
            <summary>
            Trace a Ray against this plane
            </summary>
            <param name="ray">The origin and direction to trace from</param>
            <param name="twosided">If true we'll trace against the underside of the plane too.</param>
            <param name="maxDistance">The maximum distance from the ray origin to trace</param>
            <returns>The hit position on the ray. Or null if we didn't hit.</returns>
        </member>
        <member name="M:Plane.GetIntersection(Plane,Plane,Plane)">
            <summary>
            Gets the intersecting point of the three planes if it exists.
            If the planes don't all intersect will return null.
            </summary>
        </member>
        <member name="T:Ray">
            <summary>
            A struct describing an origin and direction
            </summary>
        </member>
        <member name="M:Rect.GetEdges(Vector2,System.Nullable{Sandbox.UI.Length},System.Nullable{Sandbox.UI.Length},System.Nullable{Sandbox.UI.Length},System.Nullable{Sandbox.UI.Length})">
            <summary>
            Returns a Rect where left right top bottom describe the size of an edge.
            This is used for things like margin, padding, border size
            </summary>
        </member>
        <member name="M:Rect.IsInside(Rect@,System.Boolean)">
            <summary>
            Return true if the passed rect is partially or fully inside 
            </summary>
        </member>
        <member name="M:Rect.IsInside(Vector2@)">
            <summary>
            Return true if the passed point is inside
            </summary>
        </member>
        <member name="P:Rect.EdgeSize">
            <summary>
            When the Rect describes edges, this returns the total size of the edges in each direction
            </summary>
        </member>
        <member name="M:Rect.Contract(Sandbox.UI.Margin)">
            <summary>
            Where padding is an edge type rect, will return this rect contracted with those edges.
            </summary>
        </member>
        <member name="M:Rect.Shrink(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Where padding is an edge type rect, will return this rect contracted with those edges.
            </summary>
        </member>
        <member name="M:Rect.Expand(Sandbox.UI.Margin)">
            <summary>
            Where padding is an edge type rect, will return this rect expanded with those edges.
            </summary>
        </member>
        <member name="M:Rect.Add(Rect)">
            <summary>
            Expand this Rect to contain the other rect
            </summary>
        </member>
        <member name="M:Rect.Add(Vector3)">
            <summary>
            Expand this Rect to contain the point
            </summary>
        </member>
        <member name="M:Rect.AddPoint(Vector2)">
            <summary>
            Return this rect expanded to include this point
            </summary>
        </member>
        <member name="T:Rect3D">
            <summary>
            Generally used to describe the size of textures
            </summary>
        </member>
        <member name="T:Rotation">
            <summary>
            Represents a Quaternion rotation.
            </summary>
        </member>
        <member name="P:Rotation.Inverse">
            <summary>
            Returns the inverse of this rotation
            </summary>
        </member>
        <member name="M:Rotation.FromAxis(Vector3,System.Single)">
            <summary>
            Create from angle and an axis
            </summary>
        </member>
        <member name="M:Rotation.From(Angles)">
            <summary>
            Create a Rotation (quaternion) from Angles
            </summary>
        </member>
        <member name="M:Rotation.From(System.Single,System.Single,System.Single)">
            <summary>
            Create a Rotation (quaternion) from pitch yaw roll (degrees)
            </summary>
        </member>
        <member name="M:Rotation.FromPitch(System.Single)">
            <summary>
            Create a Rotation (quaternion) from pitch (degrees)
            </summary>
        </member>
        <member name="M:Rotation.FromYaw(System.Single)">
            <summary>
            Create a Rotation (quaternion) from yaw (degrees)
            </summary>
        </member>
        <member name="M:Rotation.FromRoll(System.Single)">
            <summary>
            Create a Rotation (quaternion) from roll (degrees)
            </summary>
        </member>
        <member name="M:Rotation.LookAt(Vector3,Vector3)">
            <summary>
            Create a Rotation (quaternion) from a forward and up vector
            </summary>
        </member>
        <member name="M:Rotation.LookAt(Vector3)">
            <summary>
            Create a Rotation (quaternion) from a forward and up vector
            </summary>
        </member>
        <member name="M:Rotation.Difference(Rotation,Rotation)">
            <summary>
            Returns the difference between two rotations, as a rotation
            </summary>
        </member>
        <member name="M:Rotation.Distance(Rotation)">
            <summary>
            The degree angular distance between this rotation and the target
            </summary>
        </member>
        <member name="M:Rotation.Angle">
            <summary>
             Returns the turn length of this rotation (from identity) in degrees
            </summary>
        </member>
        <member name="M:Rotation.Angles">
            <summary>
            Return this Rotation as pitch, yaw, roll angles
            </summary>
        </member>
        <member name="M:Rotation.Pitch">
            <summary>
            Return this Rotation pitch
            </summary>
        </member>
        <member name="M:Rotation.Yaw">
            <summary>
            Return this Rotation yaw
            </summary>
        </member>
        <member name="M:Rotation.Roll">
            <summary>
            Return this Rotation roll
            </summary>
        </member>
        <member name="M:Rotation.Lerp(Rotation,Rotation,System.Single,System.Boolean)">
            <summary>
            Lerp from a to b by amount
            </summary>
        </member>
        <member name="M:Rotation.Slerp(Rotation,Rotation,System.Single,System.Boolean)">
            <summary>
            Slerp from a to b by amount
            </summary>
        </member>
        <member name="M:Rotation.Clamp(Rotation,System.Single)">
            <summary>
            Clamp to within degrees of passed rotation
            </summary>
        </member>
        <member name="M:Rotation.Clamp(Rotation,System.Single,System.Single@)">
            <summary>
            Clamp to within degrees of passed rotation. Also pases out the change in degrees, if any.
            </summary>
        </member>
        <member name="M:Rotation.Parse(System.String)">
            <summary>
            Given a string, try to convert this into a quaternion rotation. The format is "x,y,z,w"
            </summary>
        </member>
        <member name="M:Rotation.RotateAroundAxis(Vector3,System.Single)">
            <summary>
            A convenience function that rotates this rotation around a given axis given amount of degrees
            </summary>
        </member>
        <member name="T:Transform">
            <summary>
            A struct containing a position, rotation and scale. This is commonly used in engine to describe
            entity position, bone position and scene object position.
            </summary>
        </member>
        <member name="M:Transform.ToLocal(Transform)">
            <summary>
            Convert child transform from the world to a local transform
            </summary>
        </member>
        <member name="M:Transform.PointToLocal(Vector3)">
            <summary>
            Convert a point in world space to a point in this transform's local space
            </summary>
        </member>
        <member name="M:Transform.NormalToLocal(Vector3)">
            <summary>
            Convert a world normal to a local normal
            </summary>
        </member>
        <member name="M:Transform.RotationToLocal(Rotation)">
            <summary>
            Convert a world rotation to a local rotation
            </summary>
        </member>
        <member name="M:Transform.PointToWorld(Vector3)">
            <summary>
            Convert a point in this transform's local space to a point in world space
            </summary>
        </member>
        <member name="M:Transform.NormalToWorld(Vector3)">
            <summary>
            Convert a local normal to a world normal
            </summary>
        </member>
        <member name="M:Transform.RotationToWorld(Rotation)">
            <summary>
            Convert a local rotation to a world rotation
            </summary>
        </member>
        <member name="M:Transform.ToWorld(Transform)">
            <summary>
            Convert child transform from local to the world
            </summary>
        </member>
        <member name="M:Transform.TransformVector(Vector3)">
            <summary>
            Transform a Vector as if it were a child of this transform
            </summary>
        </member>
        <member name="M:Transform.Lerp(Transform,Transform,System.Single,System.Boolean)">
            <summary>
            Lerp from one transform to another
            </summary>
        </member>
        <member name="M:Transform.Add(Vector3,System.Boolean)">
            <summary>
            Add a position to this transform and return the result.
            </summary>
        </member>
        <member name="M:Transform.WithPosition(Vector3)">
            <summary>
            Return this transform with a new position
            </summary>
        </member>
        <member name="M:Transform.WithRotation(Rotation)">
            <summary>
            Return this transform with a new rotation
            </summary>
        </member>
        <member name="M:Transform.WithScale(System.Single)">
            <summary>
            Return this transform with a new scale
            </summary>
        </member>
        <member name="P:Vector2.Length">
            <summary>
            Returns the magnitude of the vector
            </summary>
        </member>
        <member name="P:Vector2.LengthSquared">
            <summary>
            This is faster than Length, so is better to use in certain circumstances
            </summary>
        </member>
        <member name="P:Vector2.IsNearZeroLength">
            <summary>
            returns true if the squared length is less than 1e-8 (which is really near zero)
            </summary>
        </member>
        <member name="P:Vector2.Normal">
            <summary>
            Return the same vector but with a length of one
            </summary>
        </member>
        <member name="M:Vector2.FromRadian(System.Single)">
            <summary>
            TODO: Is this useful?
            </summary>
        </member>
        <member name="M:Vector2.Parse(System.String)">
            <summary>
            Given a string, try to convert this into a vector4. The format is "x,y,z,w".
            </summary>
        </member>
        <member name="M:Vector2.SnapToGrid(System.Single,System.Boolean,System.Boolean)">
            <summary>
            Snap To Grid along all 3 axes
            </summary>
        </member>
        <member name="M:Vector2.WithX(System.Single)">
            <summary>
            Return this vector with x
            </summary>
        </member>
        <member name="M:Vector2.WithY(System.Single)">
            <summary>
            Return this vector with y
            </summary>
        </member>
        <member name="M:Vector2.Lerp(Vector2,Vector2,System.Single,System.Boolean)">
            <summary>
            Linearly interpolate from point a to point b
            </summary>
        </member>
        <member name="F:Vector2.One">
            <summary>
            Returns a Vector with every component set to 1
            </summary>
        </member>
        <member name="F:Vector2.Zero">
            <summary>
            Returns a Vector with every component set to 0
            </summary>
        </member>
        <member name="P:Vector3.IsNaN">
            <summary>
            Returns true if x, y or z are NaN
            </summary>
        </member>
        <member name="M:Vector3.Sort(Vector3@,Vector3@)">
            <summary>
            Sort these two vectors into min and max. This doesn't just swap the vectors, it sorts each component.
            So that min will come out containing the minimum x, y and z values.
            </summary>
        </member>
        <member name="M:Vector3.ToString">
            <summary>
            Formats the Vector into a string "x,y,z"
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vector3.Parse(System.String)">
            <summary>
            Given a string, try to convert this into a vector. Example input formats that work would be "1,1,1", "1;1;1", "[1 1 1]".
            
            This handles a bunch of different seperators ( ' ', ',', ';', '\n', '\r' ).
            
            It also trims surrounding characters ('[', ']', ' ', '\n', '\r', '\t', '"').
            </summary>
        </member>
        <member name="M:Vector3.IsNearlyEqual(Vector3,System.Single)">
            <summary>
            Returns true if we're nearly equal to the passed vector.
            </summary>
            <param name="v">The value to compare with</param>
            <param name="delta">The max difference between component values</param>
            <returns>True if nearly equal</returns>
        </member>
        <member name="M:Vector3.SubtractDirection(Vector3,System.Single)">
            <summary>
            Given a vector like 1,1,1 and direction 1,0,0, will return 0,1,1.
            This is useful for velocity collision type events, where you want to
            cancel out velocity based on a normal.
            For this to work properly, direction should be a normal, but you can scale
            how much you want to sutract by scaling the direction. Ie, passing in a direction
            with a length of 0.5 will remove half the direction.
            </summary>
        </member>
        <member name="M:Vector3.IsNearlyZero(System.Single)">
            <summary>
            Return true if less than tolerance away from zero
            </summary>
        </member>
        <member name="M:Vector3.SnapToGrid(System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Snap To Grid along all 3 axes
            </summary>
        </member>
        <member name="M:Vector3.GetAngle(Vector3,Vector3)">
            <summary>
            Return the distance between the two direction vectors in degrees
            </summary>
        </member>
        <member name="M:Vector3.Angle(Vector3)">
            <summary>
            Return the distance between the two direction vectors in degrees
            </summary>
        </member>
        <member name="P:Vector3.EulerAngles">
            <summary>
            The euler angle of this vector
            </summary>
        </member>
        <member name="M:Vector3.VectorAngle(Vector3)">
            <summary>
            Converts a vector to an angle
            </summary>
        </member>
        <member name="M:Vector3.AddClamped(Vector3,System.Single)">
            <summary>
            Try to add to this vector. If we're already over max then don't add.
            If we're over max when we add, clamp in that direction so we're not.
            </summary>
        </member>
        <member name="M:Vector4.ToString">
            <summary>
            Formats the Vector into a string "x,y,z,w"
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vector4.Parse(System.String)">
            <summary>
            Given a string, try to convert this into a vector4. The format is "x,y,z,w".
            </summary>
        </member>
    </members>
</doc>
